-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.

CREATE TABLE IF NOT EXISTS public.films
(
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name character varying(100) NOT NULL,
    description character varying(200),
    release_date date,
    duration integer NOT NULL,
    genre_id integer,
    rating_id integer,
    CONSTRAINT pk_films_film_id PRIMARY KEY (film_id)
);

CREATE TABLE IF NOT EXISTS public.genre
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name character varying(100) NOT NULL,
    CONSTRAINT genre_genre_name_unq UNIQUE (genre_name)
);

CREATE TABLE IF NOT EXISTS public.rating
(
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_code character varying(10),
    rating_name character varying(200),
    rating_description character varying(500),
    CONSTRAINT rating_rating_code_unq UNIQUE (rating_code)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email character varying(512) NOT NULL,
    login character varying(50) NOT NULL,
    user_name character varying(50),
    birthday date,
    CONSTRAINT users_email_unq UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.film_likes
(
    film_id INTEGER,
    user_id INTEGER,
    PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.user_friends
(
    user_id INTEGER,
    friend_id INTEGER,
    confirmed boolean,
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS public.film_genres
(
    film_id INTEGER,
    genre_id INTEGER,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    event_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    event_type VARCHAR(50) NOT NULL,
    event_operation VARCHAR(50) NOT NULL,
    entity_id INTEGER NOT NULL,
    timestamp BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS public.director
(
    director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.film_director
(
    film_id INTEGER NOT NULL,
    director_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS public.review
(
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(500) NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id INTEGER NOT NULL,
    film_id INTEGER NOT NULL,
    useful INTEGER
);

CREATE TABLE IF NOT EXISTS public.review_likes
(
    review_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    is_useful BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id)
);

ALTER TABLE IF EXISTS public.films
    ADD CONSTRAINT fk_filmsto_rating FOREIGN KEY (rating_id)
    REFERENCES public.rating (rating_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_likes
    ADD CONSTRAINT fk_film_likes_to_films FOREIGN KEY (film_id)
    REFERENCES public.films (film_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_likes
    ADD CONSTRAINT fk_film_likes_to_users FOREIGN KEY (user_id)
    REFERENCES public.users (user_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_friends
    ADD CONSTRAINT fk_user_friends_to_user FOREIGN KEY (user_id)
    REFERENCES public.users (user_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_friends
    ADD CONSTRAINT fk_user_friends_to_user_as_friend FOREIGN KEY (friend_id)
    REFERENCES public.users (user_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_genres
    ADD CONSTRAINT fk_film_genres_to_films FOREIGN KEY (film_id)
    REFERENCES public.films (film_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_genres
    ADD CONSTRAINT fk_film_genres_to_gene FOREIGN KEY (genre_id)
    REFERENCES public.genre (genre_id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT fk_events_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id)
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.film_director
    ADD CONSTRAINT fk_film_director_film_id FOREIGN KEY (film_id)
    REFERENCES public.films (film_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.film_director
    ADD CONSTRAINT fk_film_director_director_id FOREIGN KEY (director_id)
    REFERENCES public.director (director_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT fk_review_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT fk_review_film_id FOREIGN KEY (film_id)
    REFERENCES public.films (film_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.review_likes
    ADD CONSTRAINT fk_review_likes_review_id FOREIGN KEY (review_id)
    REFERENCES public.review (review_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.review_likes
    ADD CONSTRAINT fk_review_likes_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE;